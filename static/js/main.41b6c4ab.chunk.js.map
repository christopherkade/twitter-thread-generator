{"version":3,"sources":["components/Header/twitter.svg","components/Header/Icon/Icon.js","components/Header/Header.js","components/TextBox/TextBox.js","components/Output/Tweet/Tweet.js","components/Output/Output.js","components/Counter/Counter.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Icon","styled","img","_templateObject","Wrapper","article","Header_templateObject","Text","h1","_templateObject2","Header","_useState","useState","phrases","_useState2","Object","slicedToArray","phrase","setPhrase","react_default","a","createElement","Icon_Icon","src","TwitterIcon","onClick","Math","floor","random","length","alt","TextBox","textarea","TextBox_templateObject","div","Tweet_templateObject","OutputTextBox","Tweet_templateObject2","CopyIcon","span","_templateObject3","TweetNumber","_templateObject4","Tweet","_ref","text","index","total","hovered","setHovered","_useState3","_useState4","copied","setCopied","ClipboardJS","concat","on","handleHover","isHovered","Tweet_Wrapper","readOnly","id","data-clipboard-target","onMouseEnter","onMouseLeave","value","role","aria-label","Output","tweets","Fragment","map","tweet","Output_Tweet_Tweet","key","Counter","Counter_templateObject","ContentWrapper","App_templateObject","App","setTweets","totalCharacters","setTotalCharacters","components_Header_Header","TextBox_TextBox","placeholder","onChange","e","target","currentTweets","numTweets","trunc","substring","pop","Counter_Counter","components_Output_Output","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.41b6c4ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter.6ca35672.svg\";","import styled from \"styled-components\"\n\nconst Icon = styled.img`\n  width: 9.375rem;\n  height: 9.375rem;\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nexport default Icon\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\nimport { phrases } from \"./phrases.json\"\nimport TwitterIcon from \"./twitter.svg\"\nimport { Icon } from \"./Icon\"\n\nconst Wrapper = styled.article`\n  margin: 2rem;\n  display: flex;\n`\n\nconst Text = styled.h1`\n  font-size: 1.125rem;\n  font-weight: 300;\n  color: rgb(20, 23, 26);\n  margin-left: 1rem;\n`\n\nconst Header = () => {\n  const [phrase, setPhrase] = useState(phrases[0])\n\n  const selectRandomPhrase = () => setPhrase(phrases[Math.floor(Math.random() * phrases.length)])\n\n  return (\n    <Wrapper>\n      <Icon src={TwitterIcon} onClick={selectRandomPhrase} alt=\"\" />\n      <Text>&#60; {phrase}</Text>\n    </Wrapper>\n  )\n}\n\nexport default Header\n","import styled from \"styled-components\"\n\nconst TextBox = styled.textarea`\n  font-family: \"Helvetica\", sans-serif;\n  padding: 0.5rem;\n  font-size: 1rem;\n  box-shadow: none;\n  min-height: 5rem;\n  width: auto;\n  color: rgb(20, 23, 26);\n  line-height: 1.25rem;\n  border-radius: 0.5rem;\n  border: 1px solid #e6ecf0;\n  width: 31.25rem;\n  resize: none;\n\n  &:focus {\n    box-shadow: 0 0 0 2pt #03A9F4;\n    outline: none;\n  }\n\n  @media (max-width: 620px) {\n    width: 100%;\n  }\n`\n\nexport default TextBox\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\nimport ClipboardJS from \"clipboard\"\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin-top: 1rem;\n\n  @media (max-width: 620px) {\n    width: 100%;\n  }\n`\n\nconst OutputTextBox = styled.textarea`\n  font-family: \"Helvetica\", sans-serif;\n  font-size: 1rem;\n  box-shadow: 0 0 0 1pt black;\n  width: 31.25rem;\n  overflow-wrap: break-word;\n  padding: 0.5rem;\n  min-height: 5rem;\n  resize: none;\n  border-radius: 0.5rem;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  @media (max-width: 620px) {\n    width: 100%;\n  }\n`\n\nconst CopyIcon = styled.span`\n  width: 1rem;\n  height: 1rem;\n  font-size: 1rem;\n  margin-left: 1rem;\n`\n\nconst TweetNumber = styled.span`\n  margin-right: 1rem;\n  font-size: 1rem;\n  font-weight: 300;\n`\n\nconst Tweet = ({ text, index, total }) => {\n  const [hovered, setHovered] = useState(false)\n  const [copied, setCopied] = useState(false)\n\n  // Setup our clipboard\n  // On click, copy the Tweet's content\n  const clipboard = new ClipboardJS(`#tweet-${index}`)\n  clipboard.on('success', () => setCopied(true))\n\n  const handleHover = (isHovered) => {\n    setCopied(false)\n    setHovered(isHovered)\n  }\n\n  return (\n    <Wrapper>\n      <TweetNumber>\n        {index + 1}/{total}\n      </TweetNumber>\n      <OutputTextBox\n        readOnly\n        id={`tweet-${index}`}\n        data-clipboard-target={`#tweet-${index}`}\n        onMouseEnter={() => handleHover(true)}\n        onMouseLeave={() => handleHover(false)}\n        value={text}\n      />\n      <CopyIcon role=\"img\" aria-label=\"copy tweet\">\n        {hovered ? (copied ? \"âœ…\" : \"ðŸ“‹\") : \"\"}\n      </CopyIcon>\n    </Wrapper>\n  )\n}\n\nexport default Tweet\n","import React from \"react\"\n\nimport { Tweet } from \"./Tweet\"\n\nconst Output = ({ tweets }) => {\n  return (\n    <>\n      {tweets.map((tweet, index) => <Tweet key={index} text={tweet} index={index} total={tweets.length} />)}\n    </>\n  )\n}\n\nexport default Output\n","import styled from \"styled-components\"\n\nconst Counter = styled.span`\n  font-weight: 300;\n  margin: 1rem;\n`\n\nexport default Counter\n","import React, { useState } from 'react'\nimport styled from \"styled-components\"\n\nimport { Header } from \"./components/Header\"\nimport { TextBox } from \"./components/TextBox\"\nimport { Output } from \"./components/Output\"\nimport { Counter } from \"./components/Counter\"\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0.625rem 0.75rem;\n  width: 100%;\n`\n\nconst App = () => {\n  const [tweets, setTweets] = useState([])\n  const [totalCharacters, setTotalCharacters] = useState(0)\n\n  /**\n   * Called when the user inputs\n   * Calculates in what Tweet the current input should go\n   * Updates our Tweet values\n   * @param {*} e\n   */\n  // TODO: Fix bug when pasting large amounts of text\n  const parseTweet = (e) => {\n    const { value } = e.target\n    let currentTweets = tweets\n    // Total number of Tweets (starting at 0)\n    const numTweets = Math.trunc(value.length / 280)\n\n    // Save the content of our last tweet at the last position of our array\n    currentTweets[numTweets] = value.substring(280 * numTweets, value.length)\n\n    // Handles Tweet removal when the user deletes characters\n    if (currentTweets.length !== numTweets + 1) {\n      currentTweets.pop()\n    }\n\n    // When the user completely clears the textarea, reset the array\n    if (value.length === 0) {\n      currentTweets = []\n    }\n\n    setTweets(currentTweets)\n    setTotalCharacters(value.length)\n  }\n\n  return (\n    <>\n      <Header />\n      <ContentWrapper>\n        <TextBox placeholder=\"What's happening?\" onChange={parseTweet} />\n        <Counter>Total characters: {totalCharacters} â€¢ Total tweets: {tweets.length}</Counter>\n        <Output tweets={tweets} />\n      </ContentWrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}